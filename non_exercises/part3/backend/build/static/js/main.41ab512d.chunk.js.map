{"version":3,"sources":["components/Note.js","services/notes.js","components/Notification.js","components/Footer.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","baseUrl","noteService","getAll","request","axios","get","nonExisting","id","date","then","response","data","concat","create","newObject","post","update","put","Notification","message","Footer","props","style","color","fontStyle","fontSize","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","initialNotes","notesToShow","filter","map","find","n","changedNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","Date","toISOString","Math","random","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"4NAceA,EAZF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACdC,EAAQF,EAAKG,UACf,qBAAuB,iBAE3B,OACE,qBAAIC,UAAU,OAAd,UACGJ,EAAKK,QACN,wBAAQC,QAASL,EAAjB,SAAoCC,Q,gBCPpCK,EAAU,aA6BDC,EANK,CAClBC,OAtBa,WACb,IAAMC,EAAUC,IAAMC,IAAIL,GACpBM,EAAc,CAClBC,GAAI,IACJT,QAAS,mCACTU,KAAM,2BACNZ,WAAW,GAEb,OAAOO,EAAQM,MAAK,SAAAC,GAAQ,OAAIA,EAASC,KAAKC,OAAON,OAerDO,OAZa,SAAAC,GAEb,OADgBV,IAAMW,KAAKf,EAASc,GACrBL,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAWzCK,OARa,SAACT,EAAIO,GAElB,OADgBV,IAAMa,IAAN,UAAajB,EAAb,YAAwBO,GAAMO,GAC/BL,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UCV5BO,MAZf,YAAoC,IAAZC,EAAW,EAAXA,QACtB,OAAgB,OAAZA,EACK,KAIP,qBAAKtB,UAAU,QAAf,SACGsB,KCQQC,MAff,SAAgBC,GAOd,OACE,sBAAKC,MAPa,CAClBC,MAAO,QACPC,UAAW,SACXC,SAAU,IAIV,UACE,uBACA,2GCuFSC,EA3FH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,OAEcF,mBAAS,iBAFvB,mBAETG,EAFS,KAEAC,EAFA,OAGcJ,oBAAS,GAHvB,mBAGTK,EAHS,KAGAC,EAHA,OAIwBN,mBAAS,MAJjC,mBAITO,EAJS,KAIKC,EAJL,KAMhBC,qBAAU,WACRnC,EACGC,SACAO,MAAK,SAAC4B,GACLR,EAASQ,QAEZ,IAEH,IAsBMC,EAAcN,EAChBJ,EACAA,EAAMW,QAAO,SAAA9C,GAAI,OAAIA,EAAKG,aAuB9B,OACE,gCACE,uCACA,cAAC,EAAD,CAAcuB,QAASe,IACvB,8BACE,yBAAQnC,QAAS,kBAAMkC,GAAYD,IAAnC,kBACQA,EAAU,YAAc,WAGlC,6BACGM,EAAYE,KAAI,SAAA/C,GAAI,OACnB,cAAC,EAAD,CAEEA,KAAMA,EACNC,iBAAkB,kBAnCD,SAACa,GAC1B,IAAMd,EAAOmC,EAAMa,MAAK,SAAAC,GAAC,OAAIA,EAAEnC,KAAOA,KAChCoC,EAAW,2BAAQlD,GAAR,IAAcG,WAAYH,EAAKG,YAEhDK,EACGe,OAAOT,EAAIoC,GACXlC,MAAK,SAAAmC,GACJf,EAASD,EAAMY,KAAI,SAAA/C,GAAI,OAAIA,EAAKc,KAAOA,EAAKd,EAAOmD,SAEpDC,OAAM,SAAAC,GACLX,EAAgB,YAAD,OACD1C,EAAKK,QADJ,yCAGfiD,YAAW,WACTZ,EAAgB,QACf,KAEHN,EAASD,EAAMW,QAAO,SAAAG,GAAC,OAAIA,EAAEnC,KAAOA,SAkBRyC,CAAmBvD,EAAKc,MAF3Cd,EAAKc,SAMhB,uBAAM0C,SAjEM,SAACC,GACfA,EAAMC,iBAEN,IAAMC,EAAa,CACjBtD,QAASgC,EACTtB,MAAM,IAAI6C,MAAOC,cACjB1D,UAAW2D,KAAKC,SAAW,IAG7BvD,EACGY,OAAOuC,GACP3C,MAAK,SAAAmC,GACJf,EAASD,EAAMhB,OAAOgC,IACtBb,EAAW,QAoDb,UACE,uBACE0B,MAAO3B,EACP4B,SAlDiB,SAACR,GACxBnB,EAAWmB,EAAMS,OAAOF,UAmDpB,wBAAQG,KAAK,SAAb,qBAEF,cAAC,EAAD,Q,MCxFNC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.41ab512d.chunk.js","sourcesContent":["import React from 'react';\n\nconst Note = ({ note, toggleImportance }) => {\n  const label = note.important\n    ? 'make not important' : 'make important';\n\n  return (\n    <li className=\"note\">\n      {note.content}\n      <button onClick={toggleImportance}>{label}</button>\n    </li>\n  )\n};\n\nexport default Note;\n","import axios from 'axios';\n\nconst baseUrl = '/api/notes';\n\nconst getAll = () => {\n  const request = axios.get(baseUrl);\n  const nonExisting = {\n    id: 10000,\n    content: 'This note is not saved to server',\n    date: '2019-05-30T17:30:31.098Z',\n    important: true,\n  }\n  return request.then(response => response.data.concat(nonExisting));\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject);\n  return request.then(response => response.data);\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject);\n  return request.then(response => response.data);\n}\n\nconst noteService = {\n  getAll,\n  create,\n  update\n};\n\nexport default noteService;\n","function Notification({ message }) {\n  if (message === null) {\n    return null;\n  }\n\n  return (\n    <div className=\"error\">\n      {message}\n    </div>\n  );\n}\n\nexport default Notification;\n","function Footer(props) {\n  const footerStyle = {\n    color: 'green',\n    fontStyle: 'italic',\n    fontSize: 15\n  };\n\n  return (\n    <div style={footerStyle}>\n      <br />\n      <em>Note app, Department of Computer Science, University of Helsinki 2021</em>\n    </div>\n  );\n}\n\nexport default Footer;\n","import React, { useState, useEffect } from 'react';\nimport Note from './components/Note';\nimport noteService from './services/notes';\nimport Notification from './components/Notification';\nimport Footer from './components/Footer';\n\nconst App = () => {\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState('a new note...');\n  const [showAll, setShowAll] = useState(true);\n  const [errorMessage, setErrorMessage] = useState(null);\n\n  useEffect(() => {\n    noteService\n      .getAll()\n      .then((initialNotes) => {\n        setNotes(initialNotes);\n      })\n  }, []);\n\n  const addNote = (event) => {\n    event.preventDefault();\n\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() < 0.5,\n    };\n\n    noteService\n      .create(noteObject)\n      .then(returnedNote => {\n        setNotes(notes.concat(returnedNote))\n        setNewNote('');\n      })\n\n  };\n\n  const handleNoteChange = (event) => {\n    setNewNote(event.target.value);\n  };\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter(note => note.important);\n\n  const toggleImportanceOf = (id) => {\n    const note = notes.find(n => n.id === id);\n    const changedNote = { ...note, important: !note.important };\n\n    noteService\n      .update(id, changedNote)\n      .then(returnedNote => {\n        setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n      })\n      .catch(error => {\n        setErrorMessage(\n          `the note ${note.content} was already deleted from the server`\n        );\n        setTimeout(() => {\n          setErrorMessage(null);\n        }, 5000);\n\n        setNotes(notes.filter(n => n.id !== id));\n      });\n  }\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all'}\n        </button>\n      </div>\n      <ul>\n        {notesToShow.map(note =>\n          <Note\n            key={note.id}\n            note={note}\n            toggleImportance={() => toggleImportanceOf(note.id)}\n            />\n        )}\n      </ul>\n      <form onSubmit={addNote}>\n        <input\n          value={newNote}\n          onChange={handleNoteChange}\n        />\n        <button type=\"submit\">save</button>\n      </form>\n      <Footer />\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App.js';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}